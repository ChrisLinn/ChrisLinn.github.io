* homology 與 homotopy 的語言

  - x ::
       既然目的是實現 at1
       而且又知道 對語法和語義的新需求都來源於 at
       那麼就以新需求爲引導吧

  - k ::
       那麼我們努力嘗試表達 homology 與 homotopy 中所遇到的所有構造細節

  ------

  - x ::
       我想現在使用 類似 sequent0 的語言來描述
       我們在學習 at 的時候所看到的概念
       還爲時尚早
       我們應該先透徹地學習
       這門學科本身
       不要讓我們的想象受限於當前的語法與實現
       當然了
       我們的想象都將是以構造爲基礎的
       我們還是會想如何描述與如何實現
       只是不使用具體的語言了

  - k ::
       我想這是顯然的
       我們應該以代數拓撲專家的身份來設計語言
       而不應該以代數拓撲初學者的身份來設計語言

* higher-inductive-type <2016-12-20 Tue>

*** 引

    - x ::
         對於一個類型 可以引入高階 data-constructor
         與 構造 0 階數據的 data-constructor 不同
         高階的 data-constructor 之引入不是自由的
         它們的類型需要滿足各種條件
         homology 與 homotopy 所需要的條件可能不同
         等等

    - k ::
         其實
         構造 0 階數據的 data-constructor 的類型也是有限制的
         它的返回值必須屬這個類型本身

    - x ::
         定義類型[space]的過程就是描述一個幾何體[拓撲體]構造的過程
         類型系統的特點就是兩層數據
         在 sequent0 中我們已經能看出來
         有 main-rewrite 也有檢驗部分
         通常是 body-arrow 爲 main-rewrite
         但也可能是 type-arrow 爲 main-rewrite
         在 higher-inductive-type 中我們也能看出來
         此時的 body 是平凡的
         而 type 上的檢驗可以多種多樣
         homology 的檢驗可能較爲寬鬆
         homotopy 的檢驗可能更嚴格 並且還要檢驗可定向性 等等
         檢驗的方式不同
         所允許的構造就不同
         用 '圖像' 來理解這些構造的方式也不同
         homology 可能是 non-determinate
         homotopy 可能是 determinate
         等等
         甚至形式化之後的 homotopy 已經與古典不同
         都有可能

    - k ::
         我記得你之前總結了 homotopy 有關的一些原則
         我們回憶一下之前的想法 與所遇到的難點吧
