#+title: syntax -- design and notes

* todo

  - a syntax to do assertion

  - re resign the syntax of (type ...)
    [since the syntax of (lambda is almost fixed now)]

  - product-space can be reduced to simple-space.
    how about dependent-product-space ?
    note that,
    fiber-space is just dependent-product-space.
    maybe the rule of boundary of product-space also holds here.

* note

  - 上同調與微分形式有關

  - 古典的數學語言之所以晦澀
    是因爲 爲了 書寫的速度 而 放棄了 易讀性
    寫者在當時的思考環境下 可以很容易讀懂自己的簡記
    但是另外一個讀者 或者寫着本身脫離了當時的思考環境之後
    所寫的東西就需要解釋許久才能恢復意義
    有時甚至根本不可能再恢復意義

* design the language with the UI in mind

  - should I design the language with the UI in mind,
    or seprate the language and the UI ?

  - what kind of UI do I want ?

* on the type of syntax

  - infix
    prefix
    postfix
    borderfix

  - the asymmetry of writing method

* syntax to describe syntax

  | global | <name> |
  | local  | :name  |

  #+begin_src scheme
  (:= <name> (or ...))
  (:= :name (or ...))
  #+end_src

* general linguistics

  - compare to natural language,
    the syntaxes of programming languages are very simple.
    this single fact makes it very important to learn general linguistics.

* what is good syntax ?

  - good syntax make meaning explicit to reader.
    meaning is use.

* the psychology of reading code

  - by reading code in some language,
    you imagine how the machine would run.
    in your mind, you are always actively interpreting the code.
    the understanding of code happens in many levels.

  - this observation amost can guide a language designer.
    language should help the imagination.

* about modularity

  - it is such a burden
    to have to come up with unique name for every dc.
    it is also not satisfactory
    to prefix every dc with their space name.

  - a module-system must be design to solve this.
    a syntax for 'prefixing every dc with their space name'
    must be designed.
    but locally, in every source code file,
    the prefix can be omited.

  - I will use symbel-pattern '<space-name>/<dc-name>' here.
    or '<module-name>/<space-name>/<dc-name>'
    or '<module-name>/<function-name>'
