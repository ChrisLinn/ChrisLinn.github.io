#+title: algebraic-topology-1 holding

* todo

  - fix syntax of homotopy group and relative-homotopy group

  - cylinder torus and MCG of dehn

* leaning path

  - fiber-space -> hopf-fibration

  - hopf-fibration -> cutting-and-regluing -> dehn-surgery -> lens-space ->
    thurston-s-teaching -> hyperbolic geometry -> projective geometry

  - hopf-fibration -> GA and SO(3) -> matrix group

  - classical-background -> cobordism

  - classical-background -> dimension-down

  - dimension-down -> infinitesimal -> non-standard-analysis

  - infinitesimal -> leibniz euler newton

  - hopf-fibration -> H-space -> hopf-invariant -> hopf-algebra

* about classical construction

  - There are many ways to do classical constructions in algebraic topology.
    One who wishes to design a formal language for algebraic topology,
    must choose carefully which to implement,
    which concept to include in, and which concept to hold still,
    while waiting for a better understanding of
    how constructive the concept is.

* immersion and embedding

  - map of type (-> A B)
    is an immersion of A in B.

  - with the 'no self-intersection' condition,
    the map is an embedding,
    B is the ambient space.

  - If the embedding is to be expressed at all,
    the sphere-3 defined as with no non-trivial path
    will be not enough for embedding.

  - Thus distinction between constructions of the same space
    must be maintained.

  - Or we must be able to intro subdivision locally.
    for example, to intro a path in a surface,
    which connects two point on the boundary of the surface.

* hopf fibration

  - The dependent product of sphere-1 and a circle in sphere-2
    is a torus fibered as a circle of sphere-1 linked together
    as hopf links.

    | base-space (S2) | total-space (S3) |
    |-----------------+------------------|
    | a point         | a circle         |
    | two points      | two hopf links   |
    | a path          | a hopf band      |
    | a circle        | a torus (*)      |
    | half S2         | a solid torus    |

  - A hopf band is a surface whose boundary are hopf links,
    in hopf fibration, there are full of such surfaces.

  - The torus with (*) in the table
    might be useful for the construction of hopf-fibration of S3
    by Dehn surgery.

  - Can I construct the solid torus first by half S2 ?

  - I must be able to express the facts above in my language.

  #+begin_src scheme
  (def I
    (type space
      i0 i1 (-1 <>)
      i01 (0 i0 i1)))

  (def sphere-1
    (type (-> space)
      b1 (-> (-1 <>))
      loop (-> (0 b1 b1))))

  (* sphere-1 I)
  (* b1 i0)    : (-1 (* sphere-1 I))
  (* b1 i1)    : (-1 (* sphere-1 I))
  (* b1 i01)   : (* b1 (0 i0 i1))
  -->            (0 (* b1 i0) (* b1 i1))
  (* loop i0)  : (* (0 b1 b1) i0)
  -->            (0 (* b1 i0) (* b1 i0))
  (* loop i1)  : (* (0 b1 b1) i1)
  -->            (0 (* b1 i1) (* b1 i1))
  (* loop i01) : (+ (* loop (0 i0 i1)) (* (0 b1 b1) i01))
  -->            (+ (1 (* loop i0) (* loop i1) rev)
                    (1 (* b1 i01) (* b1 i01) rev))
  -->            (1 (* loop i0) (* b1 i01)
                    (* loop i1) rev (* b1 i01) rev)

  (? sphere-1 I)
  (? b1 i0)    : (-1 (? sphere-1 I))
  (? b1 i1)    : (-1 (? sphere-1 I))
  (? b1 i01)   : (? b1 (0 i0 i1))
  -->            (0 (? b1 i0) (? b1 i1))
  (? loop i0)  : (? (0 b1 b1) i0)
  -->            (0 (? b1 i0) (? b1 i1))
  (? loop i1)  : (? (0 b1 b1) i1)
  -->            (0 (? b1 i1) (? b1 i0))
  (? loop i01) : (1 (? loop i0)
                    (? loop i1))

  (def sphere-1
    (type (-> space)
      b1 (-> (-1 <>))
      loop (-> (0 b1 b1))))

  (def sphere-2
    (type (-> space)
      b2 (-> (-1 <>))
      surf (-> (1 b2 refl))))

  (* sphere-2 sphere-1)
  (* b2 b1)     : (-1 (* sphere-2 sphere-1))
  (* b2 loop)   : (* b2 (0 b1 b1))
  -->             (0 (* b2 b1) (* b2 b1))
  (* surf b1)   : (* (1 b2 refl) b1)
  -->             (1 (* b2 b1) refl)
  (* surf loop) : (+ (* surf (0 b1 b1))
                     (* (1 b2 refl) loop))
  -->             (+ (2 (* surf b1) (* surf b1))
                     (2 (1 (* b2 loop)) refl))
  -->             (2 (* surf b1) (* surf b1)
                     (1 (* b2 loop)) refl)

  (? sphere-2 sphere-1)
  (? b2 b1)     : (-1 (? sphere-2 sphere-1))
  (? b2 loop)   : (? b2 (0 b1 b1))
  -->             (0 (? b2 b1) (? b2 b1))
  (? surf b1)   : (? (1 b2 refl) b1)
  -->             (1 (? b2 loop))
  (? surf loop) : (+ (? surf (0 b1 b1))
                     (? (1 b2 refl) loop))
  #+end_src

* lens-space

  - how can we do a cutting-and-regluing
    to cut (* sphere-1 sphere-2)
    and to reglue it to sphere-3

  - is this the same as hopf fibration

  - what lens-space are equal to ?

  - different ways to construct lens-space
    - dehn-surgery
      - note that, we have a change of dim here
    - ><><><

* the plan

  - Inspired by Bishop's plan
    and the treatment of algebraic-topology by sze-tsen-hu.

  - A concept is defined once we explain how to implement it in our language.
    - Just like in physics, a concept is operationally defined,
      once we explain how to measure it.

  - To define property of object
    by the solvability of problem fromed around the object.

* same-position-self-gluing, cancel or not cancel ?

  - same-position-self-gluing
    [for example: p * p^{-1}]

  - non-same-position-self-gluing
    can only happen,
    when there is at least one part of the boundary is repeating.
    [for example: p * p]

  - [cancel or not cancel ?]
    when building a cylinder,
    the boundary of the surface must be a circle,
    thus part of the same-position-self-gluing of a path
    can not be canceled !

* geometry

  - How to intro geometry back to a language for AT ?
    by giving path a length ? surface an area ?
    or by a general structure for all the measurement ?

* classical mechanics

  - 引入幾何的同時
    可否像利用微分流形來處理經典力學一樣
    利用 cell-complex-structure 來處理經典力學 ?
    利用 cell-complex-structure 描述空間的同時
    還要描述空間中的運動

  - 如何在 cell-complex-structure 上引入座標系 ?
    是否應該引入座標系 ?
    這對描述運動而言是否是必要的

* adjunction-space

  - 是否在 at1 中引入 adjunction-space ?
    作爲一種構造新空間的方式 ?

  - 注意
    cell-complex 中的 characteristic-map 就是 adjunction-space

* local-subdivision

  - With the syntax for local-subdivision,
    maybe we can prove the mapping-class-group of cell is trivial.

  - 可以利用 local-subdivision 來恢復 topology structure 嗎 ?

  - continuum 的一個直觀特徵是
    可以被潛在無限地細分
    local-subdivision 就是爲了捕捉這個特徵

  - they may be divided anywhere,
    though they cannot be divided everywhere at the same time.

* dehn 的方法

  - x -
    dehn 的方法在於
    在曲面上給出一個座標系
    使得密布曲面的嵌入曲線得以代數表示
    因爲曲線是密布曲面的
    所以這個代數結構的變換羣就是曲面的映射類羣

* 映射類羣

  - x -
    disk[cell] is special,
    for its mapping-class-group is trivial.
    is this the reason why cell-complex is built by cells ?

  - k -
    首先我們需要知道如何在 at1 中定義映射類羣
    並且要知道我們的定義是良好的

  - x -
    也就是說 我們必須給我們的形式語言以古典基礎
    - 古典的定義是開端 它們定義了研究對象
      爲了探究這些對象的某些性質
      我們發現略去古典定義中的大部分信息
      就可以簡化我們所使用的語言
    - 我們想要直接使用這個更簡的語言
      但是這需要辯護
      我們需要證明這個更簡的語言是對原語言的有效簡化
      而不會有不一致的地方
    - 我們並不棄幾何而只看拓撲
      也不棄拓撲而只看代數
      我們要明確這些不同的語言之間的關係
      作爲語言的設計者和理論的提出者
      我們還要不斷地對比不同語言 就解決問題而言之優劣

  - k -
    古典定義之所以爲 '古典'
    是因爲人們已經如此習以爲常
    以至於略去了這些概念的啓發性例子
    和這些概念之形成的歷史語境

* 如何處理同倫中維數的變化

  - x -
    認爲路的寬度不是零而是無窮小何如

  - k -
    我想在 at1 中維度的變化主要體現在 refl 這個操作上

  - x -
    我們先來總結一些現象吧
    (1)
    首先 (x refl) 可以被理解爲單位元 [也就是說可以隨時消去和引入]
    並且 (x refl boundary boundary) = 0
    因爲 (x refl boundary) = (+ x x rev)
    (2)
    其次 計算 cylinder 的 mapping-class-group 時
    所給出的扭轉
    在 at1 中看起來是把一部分面積給擠壓掉了
    可能需要用無窮小量來理解這種映射

* 非標準分析

  - x -
    我們開始學習 非標準分析
    嘗試用它來解決 形式化的同倫論中的維數變化問題

  - k -
    並且 要知道
    非標準分析 也是爲古典的領域設計新語言的一個例子

  - x -
    我想 看看古典的著作中作者是如何依直覺使用無窮小量的
    也許會有益於我們的學習

* embedding 與 homotopy

  - x -
    MCG 中的映射是 X 到自身的 embedding
    但是 把面积挤压到邊界的映射並非 embedding
    但是我必須要允許這種映射
    因爲在我的形式化語言中 我想象不出別的選擇

  - k -
    這個被擠壓的映射 與某個不被擠壓的映射同倫
    因此只有 在 homotopy 下 我們才能完成形式化

* refl

  - x -
    可以想象 refl 所生成的空間不在原空間內

* 關於邊界

  - x -
    同一個拼接起來的形狀
    可能有多種不同的 描述其邊界的方式
    比如
    cylinder 的 mapping-class-group 涉及到了同一個 space 的不同邊界描述

* homology

  - x -
    也許需要先在 at1 中發展出 homology theory
    畢竟 homology 更簡單

* the use of fibration in homotopy group

  - x -
    這應該是被優先考慮的
    畢竟 fiber-space 的形式處理 一定要能夠捕捉這種應用

* classical view

*** cell-complex 的映射

    - cell-complex 之間的映射是一次指定一個 cell 的
      因爲在 homotopy equivalent 下
      固定邊界後 cell 之間的映射只能有一種情況

* cutting-and-regluing

  - x -
    如果用 cutting-and-regluing 來構造 fiber-space
    那麼同一個空間的不同 分解方式 就能揭示不同額 fiber-space

  - k -
    或者說
    cutting-and-regluing 不是用來構造 fiber-space
    而單單是一種構造新空間的方式
    想要得到 classical fibration 中
    total-space 到 base-space 的 projection
    就要證明 cutting-and-regluing 所得到的 space 與某個 simple-space 等價
    也許一個這樣的等價 就能爲我們生成一個 projection

* >< how to define function in synthetic geometry ?

* a new plan

  - a synthetic homotopy theory with axioms;
    and a implementation as its model.

  - calculation of many different types of (co)homotopy and (co)homology,
    might be done in an intrinsic way.

  - to calculate
    mapping-class-group
    homotopy-group
    homology-group
    dRham-co-homology-group

* x 對數學的奇怪印象

  - x -
    數學本應該是最清晰的藝術於學科
    在以綜合法學習歐氏幾何或者射影幾何的時候
    我能感受到這一點
    甚至在用無窮小分析來研究物理現象的時候
    我也能感受到這一點
    但是爲什麼在學習現代數學的時候
    我確恰恰有相反的印象呢 ?
    爲什麼我總覺得所學到的前人的著述如此晦澀
    以至學來無樂呢 ?

  - k -
    欲究其因
    方向有二
    其一在己
    其二在乎他人

  - x -
    於己 可謂不勤乎
    置之且不論
    於他人之著述
    其有別於先賢者甚矣
    先賢之著 以公理爲本 實例豐富
    每舉例者 必察簡單圖形之有趣性質
    由簡至繁 引人入勝
    而今人所著者
    仿先賢之公理方法 而鮮舉實例
    其法尚一 而不辨細節

  - k -
    對於想要設計的 AT1 來說
    我們能給出良好的類似歐式幾何的 '原本' 嗎 ?

  - x -
    首先 我們有簡單的圖形 即 cell-complex
    其次 我們要找出一些有趣的關係
    最簡單的關係是 映射之間的同倫
    其次是 空間之間的同倫等價
    在這個模型下
    我們可以形成一些定理 來以綜合的方式證明 這兩個關係
    而不用再用定義驗證
    注意 對這些關係的證明都是構造性的
    一個具有一般性的命題 其實就是一個函數
    所謂 綜合的證明 就是用舊的函數構造新的函數

  - k -
    我想首先我們需要
    證明我們的理論是對經典的 CW-complex 理論的有效簡化[公理化]

  - x -
    在這之前 我也可以先發展關於 bundle-space 於 fiber-space 的理論
    並且大致想清楚如何計算 homology-group

* cell-structure of mapping-space

  - mapping-space might not be reduced to [be viewed as] simple-space,
    because a path can not be mapped to a point.

    but we do not need to,
    for the structure of simple-space
    is to make us be able to check continuity of function.

* about equality

  - equality between two elements (: [x0, x1] X),
    is established by a extension-problem
    #+begin_src scheme
    (lambda (-> I X)
      (extend-from
        (lambda (-> (list i0 i1) X)
          (-> i0 x0)
          (-> i1 x1)))
      ...)
    #+end_src

  - equality between two elements (: [f, g] (-> A X)),
    is established by a extension-problem
    #+begin_src scheme
    (lambda (-> (* A I) X)
      (extend-from
        (lambda (-> (* A (list i0 i1)) X)
          (-> (* :a i0) [:a f g])
          (-> (* :a i1) :a)))
      ...)
    #+end_src

  - we know the equality between two spaces (~~ A B)
    #+begin_src scheme
    (: f (-> A B))
    (: g (-> B A))
    (~ [f g] [A id])
    (~ [g f] [B id])

    (lambda (-> (* A I) A)
      (extend-from
        (lambda (-> (* A (list i0 i1)) A)
          (-> (* :a i0) [:a f g])
          (-> (* :a i1) :a)))
      ...)

    (lambda (-> (* B I) B)
      (extend-from
        (lambda (-> (* B (list i0 i1)) B)
          (-> (* :b i0) [:b g f])
          (-> (* :b i1) :b)))
      ...)
    #+end_src

  - but how about equality between two mapping-spaces
    (~~ (-> A X) (-> B Y)) ?

  - the algebraic structure of (-> I X) is given by a function of type
    #+begin_src scheme
    (-> [(-> I X) (-> I X)] (-> I X))
    #+end_src
    what is the equality between algebraic structures ?

  - first, we know that the definition of (~~ A B)
    is to make sure that
    homotopy(n) (A, a0) = homotopy(n) (B, b0)
    [for every definition, we must ask why we intro it this way.]
    thus, the definition of (~~ (-> A X) (-> B Y))
    must also make sure that
    homotopy(n) ((-> A X), a0) = homotopy(n) ((-> B Y), b0)
    there (: a0 (-> A X)) and (: b0 (-> B Y))

  - 子曰
    視其所以
    觀其所由
    察其所安
    人焉廋哉
    人焉廋哉

  - let's see why (~~ A B) implies
    homotopy(n) (A, a0) = homotopy(n) (B, b0)
    we know that
    #+begin_src scheme
    homotopy(n) (A, a0) :=
    (lambda (-> I A)
      (extend-from
        (lambda (-> (list i0 i1) A)
          (-> i0 a0)
          (-> i1 a0)))
      ...)
    ;; and
    homotopy(n) (B, b0) :=
    (lambda (-> I B)
      (extend-from
        (lambda (-> (list i0 i1) B)
          (-> i0 b0)
          (-> i1 b0)))
      ...)
    #+end_src
    and the equality between elements of the group
    is defined as the equality between functions.

  - if we have
    #+begin_src scheme
    (: f (-> A B))
    (: g (-> B A))
    (~ [f g] [A id])
    (~ [g f] [B id])

    (lambda (-> (* A I) A)
      (extend-from
        (lambda (-> (* A (list i0 i1)) A)
          (-> (* :a i0) [:a f g])
          (-> (* :a i1) :a)))
      ...)

    (lambda (-> (* B I) B)
      (extend-from
        (lambda (-> (* B (list i0 i1)) B)
          (-> (* :b i0) [:b g f])
          (-> (* :b i1) :b)))
      ...)
    #+end_src

  - then we can use (: f (-> A B)) to map
    elements in (-> I A) to elements in (-> I B)
    and use (: g (-> B A)) to map
    elements in (-> I B) to elements in (-> I A)

  - we must then prove whese two maps
    1. are well defined w.r.t. the equality of the group.
       [this can be proved by homotopy-extension-property]
    2. respect the group production.
    3. are revers of each other as group homomorphism.
       #+begin_src scheme
       (: x (homotopy(n) (A, a0)))
       (: [x f g] (homotopy(n) (A, a0)))
       (~ x [x f g])
       ;; and
       (: y (homotopy(n) (B, b0)))
       (: [y g f] (homotopy(n) (B, b0)))
       (~ y [y g f])
       #+end_src

* about dim

  - (* A B) dim = A dim B dim add

    (-> A X) dim = X dim A dim sub

    (* A B) dim = (-> (* A B)) dim

    (-> (-> A B) C) dim
    = C dim (-> A B) dim sub
    = C dim B dim A dim sub sub
    = C dim A dim add B dim sub
    = (-> B (* A C)) dim

* erlangen program

  - x -
    從 erlangen program 的角度來看
    就一個 cell-complex 而言
    我們考慮的只能是那些在空間自身的連續變換下不變的性質
    連續映射的類型爲 (-> X X) 並且要是滿射
    而空間自身的連續變化 甚至可以改變其部分的維度
    高維元素可以映射到低維元素
    反過來 低維元素是不是也應該可以映射到高維元素 ?

* sad fact

  - x -
    我發現想要拋棄 topological structure
    就必須要先非常熟悉它
    而我對它的學習是爲了讓後人不再學習它
    讓它在我這裏終止

* begin

  - x -
    I begin here.
    And I won't begin in the way
    in which I can ensure to you I won't fall to error.
    I just begin.
