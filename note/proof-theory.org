#+title: proof theory

* (1975) (gaisi takeuti) proof theory

*** chapter 1 first order predicate logic

*** chapter 2 peano arithmetic

*** chapter 3 second order systems and simple type theory

*** chapter 4 infinitary logic

*** chapter 5 consistency proofs
* (1998) (buss) an introduction to proof theory

*** proof theory of propositional logic

***** frege proof systems

***** the propositional sequent calculus

***** propositional resolution refutations

*** proof theory of first-order logic

***** syntax and semantics

***** hilbert-style proof systems

***** the first-order sequent calculus

***** cut elimination

***** herbrand's theorem, interpolation and definability theorem

***** first-order logic and resolution refutations

*** proof theory of other logics

***** intuitionistic logic

***** linear logic

* (1992) (a. s. troelstra) lectures on linear logic

* [note] sequent3

*** plan

    - in sequent calculus style, I will show :
      1. the proof theory of intuitionistic logic
      2. why class logic is not constructive
      3. how to restrict semantics to get linear logic

    - no inductively defined type in this version.

    - no conj, because we have data stack.

    - no duality,
      because the dogma of duality
      is in conflict with the dogma of constructivism.

    - we *do* need disj,
      but literal disj is only used for types, not for values,
      because literal disj of values
      will introduce the concept of non-deterministic.

    - (+) is a type-constructor,
      and hypothetical object of this type
      will be used by (case)

    - objects of disj type can be returned,
      only because of different types are returned
      in different branches of a (case)

    - this is also true for arrow
      we use literal arrow for types,
      but not for values.

    - (->) is a type-constructor,
      and hypothetical object of this type
      will be used by 'apply' and 'compose'
