#+title: category theory for programmers

- by Bartosz Milewski

* [note]

*** category theory for stack runtime

    - x -
      I thinkg to be happy learning this,
      we have to develop a category theory
      for our stack machine runtime.

    - k -
      you worried that you can not express them
      in the language of category theory ?
      you have not tried !

    - x -
      let try it !
      what is our objects ?
      and what is arrows ?

    - k -
      in our category
      a data-stack can be viewed as an object
      but

    ------

    - x -
      is there any other example category
      where an kind of arrows are encoded by the same information ?

    - k -
      vector space ?
      we are not talking about the category of all vector spaces.
      we are asking is a vector space a concrete category ?

    - x -
      object 就是 vector
      arrow 也是 vector
      但是一個

    ------

    - x -
      we are talking about a functor
      given a category C
      we can build a new category C-stack
      where the language is more rich

      we optimize the language of category
      to express categories generated by our stack functor better

* 1.2: What is a category?

  - three concepts

    | abstraction | type-class |
    | composition | function   |
    | identity    | quotient   |

  - category theory is about composition and identity

  - two concepts

    | object              |
    | arrow [or morphism] |

    the reason for having object is so you can type arrows

  - from category theory's view
    object has no structure

    we have Set, Group, VectorSpace, ...
    to define them in the language of category theory
    we must not reach for the concrete structure of their objects

    we must define them by
    describing the relations between their objects

    and the relations we can describe
    are all equations about arrows

    [describe properties only by interface functions]

* [note] how to define a category ?

  - Set
    Group
    Cat
    Cat-2
    VectorSpace

* [note] how to define a functor ?

  - Stack
    Dual

* 2.1: Functions, epimorphisms
* 2.2: Monomorphisms, simple types
* 3.1: Examples of categories, orders, monoids
* 3.2: Kleisli category
* 4.1: Terminal and initial objects-zer1aFgj4aU
* 4.2: Products-Bsdl_NKbNnU
* 5.1: Coproducts, sum types
* 5.2: Algebraic data types
* 6.1: Functors
* 6.2: Functors in programming
* 7.1: Functoriality, bifunctors
* 7.2: Monoidal Categories, Functoriality of ADTs, Profunctors
* 8.1: Function objects, exponentials
* 8.2: Type algebra, Curry-Howard-Lambek isomorphism
* 9.1: Natural transformations
* 9.2: bicategories
* 10.1: Monads
* 10.2: Monoid in the category of endofunctors
