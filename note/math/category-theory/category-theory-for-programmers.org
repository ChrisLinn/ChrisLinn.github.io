#+title: category theory for programmers

- by Bartosz Milewski

* lecture video

*** [note]

***** category theory for stack runtime

      - x -
        I think to be happy learning this,
        we have to develop a category theory
        for our stack machine runtime.

      - k -
        you worried that you can not express them
        in the language of category theory ?
        you have not tried !

      - x -
        let try it !
        what is our objects ?
        and what is arrows ?

      - k -
        in our category
        a data-stack can be viewed as an object
        but

      ------

      - x -
        is there any other example category
        where an kind of arrows are encoded by the same information ?

      - k -
        vector space ?
        we are not talking about the category of all vector spaces.
        we are asking is a vector space a concrete category ?

      - x -
        object 就是 vector
        arrow 也是 vector
        但是一個

      ------

      - x -
        we are talking about a functor
        given a category C
        we can build a new category C-stack
        where the language is more rich

        we optimize the language of category
        to express categories generated by our stack functor better

***** about no language to use

      - x -
        again I feel there is no language to use

      - k -
        but you are designing new languages
        you can just design the language
        we do not need to be able to run the formalized category theory

*** 1.2: What is a category?

    - three concepts

      | abstraction | type-class |
      | composition | function   |
      | identity    | quotient   |

    - category theory is about composition and identity

    - two concepts

      | object              |
      | arrow [or morphism] |

      the reason for having object is so you can type arrows

    - from category theory's view
      object has no structure

      we have Set, Group, VectorSpace, ...
      to define them in the language of category theory
      we must not reach for the concrete structure of their objects

      we must define them by
      describing the relations between their objects

      and the relations we can describe
      are all equations about arrows

      [describe properties only by interface functions]

*** 2.1: Functions, epimorphisms

    - a function is pure if you can
      memorize it and turning it into a lookup table.

    - the basic building blocks of programming
      are types and functions
      they form a category

    - take example properties from set theory
      and limit the language to arrow equations
      to translate such properties to category theory

*** [note]

    - x -
      之前我們批評過
      category theory 中所定義的 property
      是沒法被寫成謂詞
      用來判斷這個 property 是否成立的

      現在我們知道了
      這些 property 是在 implement 時被保證的
      而不是需要被判斷的

*** 2.2: Monomorphisms, simple types

*** [note] how to define a category ?

***** Set

***** Group

***** Cat

***** Cat-2

***** VectorSpace

*** [note] how to define a functor ?

***** Stack

      - x -
        object 具有 list 的結構
        但是 在 category theory 不能 探查 object 的內部結構
        那麼 應該如何表達這個 list 結構呢 ?

        之前還是說過 object 的存在只是爲了給 arrow 加類型而用的
        然而 這裏的 一個 arrow 可以作用於多種 object
        object 的這種 '類型標識' 的意義 就喪失了

      - k -
        要明白 我們想要定義這樣一個 functor
        是爲了使用 category theory 的語言

      ------

      - x -
        其實在考慮 Kleisli category 的時候
        給出了一個一般的方法
        來用已有的 category implement 新的 category
        此時 新的 category 中的 arrow 和 object 雖然還被看作是 不可分解的
        但是其實在 implementation 中 它們是可以分解的

***** Dual

*** 3.1: Examples of categories, orders, monoids

    - ><

*** 3.2: Kleisli category

    - objects of a cat can be types
      while arrows between a, b
      can not only be functions of type (a -> b)
      but also be functions of type (a -> (b, String))
      where String can be replaced by any Monoid

    - x -
      function composition is re-defined
      in postfix notation
      syntax of function composition is optimized
      can we also include this kind of re-defined function composition ?

*** 4.1: Terminal and initial objects

    - universal construction

*** 4.2: Products-Bsdl
*** 5.1: Coproducts, sum types
*** 5.2: Algebraic data types
*** 6.1: Functors
*** 6.2: Functors in programming
*** 7.1: Functoriality, bifunctors
*** 7.2: Monoidal Categories, Functoriality of ADTs, Profunctors
*** 8.1: Function objects, exponentials
*** 8.2: Type algebra, Curry-Howard-Lambek isomorphism
*** 9.1: Natural transformations
*** 9.2: bicategories
*** 10.1: Monads
*** 10.2: Monoid in the category of endofunctors

    - a monad is just a monoid-object in the monoidal-category of endofunctors,
      where in the monoidal-category tensor-product is functor composition,
      thus a special endofunctor, with two morphisms `join` and `pure`.

*** II 1.1: Declarative vs Imperative Approach
*** II 1.2: Limits
*** II 2.1: Limits, Higher order functors
*** II 2.2: Limits, Naturality
*** II 3.1: Examples of Limits and Colimits
*** II 3.2: Free Monoids
*** II 4.1: Representable Functors
*** II 4.2: The Yoneda Lemma
*** II 5.1: Yoneda Embedding
*** II 5.2: Adjunctions
*** II 6.1: Examples of Adjunctions
*** II 6.2: Free-Forgetful Adjunction, Monads from Adjunctions
*** II 7.1: Comonads
*** II 7.2: Comonads Categorically and Examples
*** II 8.1: F-Algebras, Lambek's lemma
*** II 8.2: Catamorphisms and Anamorphisms
*** II 9.1: Lenses
*** II 9.2: Lenses categorically

* (book) category theory for programmers
