#+title: category theory for programmers

- by Bartosz Milewski

* [todo-stack]

*** agda

    - agda and its module system and record type
      is actually better then type-class [and interface]
      to model math structure

* lecture video

*** 1.2: What is a category?

    - three concepts

      | abstraction | type-class |
      | composition | function   |
      | identity    | quotient   |

    - category theory is about composition and identity

    - two concepts

      | object              |
      | arrow [or morphism] |

      the reason for having object is so you can type arrows

    - from category theory's view
      object has no structure

      we have Set, Group, VectorSpace, ...
      to define them in the language of category theory
      we must not reach for the concrete structure of their objects

      we must define them by
      describing the relations between their objects

      and the relations we can describe
      are all equations about arrows

      [describe properties only by interface functions]

*** 2.1: Functions, epimorphisms

    - a function is pure if you can
      memorize it and turning it into a lookup table.

    - the basic building blocks of programming
      are types and functions
      they form a category

    - take example properties from set theory
      and limit the language to arrow equations
      to translate such properties to category theory

*** [note]

    - category theory 中所定義的 property
      是沒法被寫成謂詞
      用來判斷這個 property 是否成立的

      這些 property 是在 implement 時被保證的
      而不是需要被判斷的

*** 2.2: Monomorphisms, simple types

*** 3.1: Examples of categories, orders, monoids

*** 3.2: Kleisli category

    - objects of a cat can be types
      while arrows between a, b
      can not only be functions of type (a -> b)
      but also be functions of type (a -> (b, String))
      where String can be replaced by any Monoid

    - x -
      function composition is re-defined
      in postfix notation
      syntax of function composition is optimized
      can we also include this kind of re-defined function composition ?

*** 4.1: Terminal and initial objects

    - universal construction

*** 4.2: Products
*** 5.1: Coproducts, sum types
*** 5.2: Algebraic data types
*** 6.1: Functors
*** 6.2: Functors in programming
*** 7.1: Functoriality, bifunctors
*** 7.2: Monoidal Categories, Functoriality of ADTs, Profunctors
*** 8.1: Function objects, exponentials
*** 8.2: Type algebra, Curry-Howard-Lambek isomorphism
*** 9.1: Natural transformations
*** 9.2: bicategories
*** 10.1: Monads
*** 10.2: Monoid in the category of endofunctors

    - a monad is just a monoid-object in the monoidal-category of endofunctors,
      where in the monoidal-category tensor-product is functor composition,
      thus a special endofunctor, with two morphisms `join` and `pure`.

*** II 1.1: Declarative vs Imperative Approach
*** II 1.2: Limits
*** II 2.1: Limits, Higher order functors
*** II 2.2: Limits, Naturality
*** II 3.1: Examples of Limits and Colimits
*** II 3.2: Free Monoids
*** II 4.1: Representable Functors

    - ><

      #+begin_src cicada
      category_t (t arrow_t arrow_eqv_t)
      set_t : (type) -> type
      hom_set : ([a b] : t) -> set_t (arrow_t (a b))
      (x : t) -> hom_set (a x)
      #+end_src

*** II 4.2: The Yoneda Lemma
*** II 5.1: Yoneda Embedding
*** II 5.2: Adjunctions
*** II 6.1: Examples of Adjunctions
*** II 6.2: Free-Forgetful Adjunction, Monads from Adjunctions
*** II 7.1: Comonads
*** II 7.2: Comonads Categorically and Examples
*** II 8.1: F-Algebras, Lambek's lemma
*** II 8.2: Catamorphisms and Anamorphisms
*** II 9.1: Lenses
*** II 9.2: Lenses categorically

* (book) category theory for programmers
