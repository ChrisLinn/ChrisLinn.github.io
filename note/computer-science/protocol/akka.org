#+title: akka

- easy to use object oriented actor model API

* info

  https://doc.akka.io/docs/akka/current/index.html

* actor model metaphor

  - people cooperating with each other,
    by sending messages to each other,
    and performing ones own duty.

* axiom of actor model

  - create actor

  - send

  - receive

  - features
    - no return-stack
    - can reply messages to many other actors
      - thus a type system of such model must be very expressive
      - the logic of the type system would be very different

* supervision & error handling

* tree of actors

  - use unix file system path
    to refer to actors in the tree

* akka -- toppings on the cake

  - <person> ! <message>
    the use of `!` is like getting person's attention

  - the use of "companion object" design pattern
    https://docs.scala-lang.org/tour/singleton-objects.html

  - system of actors
    /<name>/system/
    /<name>/user/
    /<name>/user/<supervisor>/

  - lifecycle
    preStart
    postStop

  - default behavior
    restart child on child's exception

  - messaging
    - at-most-once delivery, that is, no guaranteed delivery
    - message ordering is maintained per sender, receiver pair

  - testing
    TestProbe

* protocol

  - a.k.a. frequently used message patterns
    (abstract class in object oriented language)

*** request-respond

*** delegate-respond

*** create-watch-terminate

*** scatter-gather
