#+title: graphQL

* links

  - repo :: https://github.com/facebook/graphql
  - tut :: https://www.howtographql.com

* why graphQL is better than REST

  - if only one field of information is required,
    then only one field of information will be downloaded.

  - if many fields of one json is required,
    two downloadings will be combined,
    and only one request will be issued.

* schema

  - a schema is a file of types
    with root interfaces [imp-ed as types] like
    Query, Mutation, Subscription

* schema definition language

  - use simple type system as contract
    between client and server.

    - x -
      can we add dependent type to it ?
      can we add full-featured contract system to it ?

  - the concept of relation
    is modeled by links in both objects.

    #+begin_src graphql
    type Person {
      name: String!
      age: Int!
      posts: [Post!]!
    }

    type Post {
      title: String!
      author: Person!
    }
    #+end_src

* problems

*** server-side caching

    - x -
      can we use Exo here ?

* graphql specification

*** link

    - http://facebook.github.io/graphql

*** 1 overview

    - ><

*** 2 language

*** 3 type system

*** 4 introspection

*** 5 validation

*** 6 execution

*** 7 response
