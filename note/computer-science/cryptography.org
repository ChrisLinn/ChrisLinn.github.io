#+title: cryptography

* journey into cryptography -- modern cryptography

*** links

    - https://www.khanacademy.org/computing/computer-science/cryptography

    - https://en.wikipedia.org/wiki/Cryptography

*** the fundamental theorem of arithmetic

    - each number as a different lock,
      the unique key to each lock is its prime factorization.

    - no two locks share a key,
      no two numbers share a prime factorization.

    - it is easy to multiple the prime factorization to get a number.
      it is easy to open a lock, given the key.

    - it is hard to get the prime factorization of a given number,
      it is hard to create the key of a given lock.

*** public key cryptography -- sending identical keys in secure way

    - alice
      public-color
      alice-private-color
      alice-mixed-color = public-color + alice-private-color

    - bob
      public-color
      bob-private-color
      bob-mixed-color = public-color + bob-private-color

    ------

    - eve
      public-color
      bob-mixed-color
      alice-mixed-color

    ------

    - alice
      public-color
      alice-private-color
      alice-mixed-color = public-color + alice-private-color
      bob-mixed-color = public-color + bob-private-color
      secret-color
      = public-color + bob-private-color + alice-private-color
      = bob-private-color + alice-private-color

    - bob
      public-color
      bob-private-color
      bob-mixed-color = public-color + bob-private-color
      alice-mixed-color = public-color + alice-private-color
      secret-color
      = public-color + bob-private-color + alice-private-color
      = alice-mixed-color + bob-private-color

*** the discrete logarithm problem -- one way function

    - 3 is a primitive root modulo 17
      3^x mod 17 = y, has a solution for every x
      x -> y is easy
      y -> x is hard

    - https://en.wikipedia.org/wiki/Primitive_root_modulo_n

*** Diffie-hellman key exchange

    - alice and bob agree on : 3^x mod 17 = y

    - alice
      choose private 15
      3^15 mod 17 = 6
      send 6 to bob

    - bob
      choose private 13
      3^13 mod 17 = 12
      send 12 to alice

    ------

    - alice
      12^15 mod 17 = 10
      (3^13)^15 mod 17 = 10

    - bob
      6^13 mod 17 = 10
      (3^15)^13 mod 17 = 10

    - https://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange

*** symmetric vs asymmetric

***** sharing identical keys

      - alice want to send message to bob.

        alice encrypts the message using [k : key-t],
        bob decrypts the message using the identical [k : key-t].

      - ><
        #+begin_src cicada
        key-t   = (-> text-t -- ciphertext-t)
        k       : (-> text-t -- ciphertext-t)
        {k} rev : (-> ciphertext-t -- text-t)
        rev : (-> (-> text-t -- ciphertext-t)
               -- (-> ciphertext-t -- text-t))
        #+end_src

      - x -
        we should not use a generaic function like 'rev'
        we should use type-class

        and note that
        a arrow-type can not occurs
        in fields of a type defined by (+type)
        thus the interface function might need special 'apply'

***** sending open locks

      - alice want to send message to bob.

        bob create a lock, keep the key, and send the open lock to alice,
        alice locks message and sends it back to bob.

      - lock and unlock are inverse operations
        locking needs the open lock
        unlocking needs the locked lock and the key
        or say
        locking needs the encryption key [the open lock]
        unlocking needs the the decryption key

      - james ellis
        https://en.wikipedia.org/wiki/James_H._Ellis

      - ><
        #+begin_src cicada
        (+class cipher-tc
          < (-> text-t : type-tt
                ciphertext-t : type-tt
             -- type-tt)
          encrypt
          : (-> cipher-t :: cipher-tc
                cipher : cipher-t
                text : text-t
             -- ciphertext : ciphertext-t)
          decrypt
          : (-> cipher-t :: cipher-tc
                cipher : cipher-t
                ciphertext : ciphertext-t
             -- text : text-t))
        #+end_src

      - k -
        how about someone only can use the 'encrypt'
        but can not use the 'decrypt' ?

      - x -
        ><><><

*** trapdoor one way function

    - a function which is hard to reverse
      unless you have the information call "the trapdoor"

    - clifford cocks
      https://en.wikipedia.org/wiki/Clifford_Cocks

    - the function is
      x^e mod N = y
      x :-> y

    - e and N is public
      and this function can be viewed as the mathematic lock

    - the trapdoor is d such that
      (x^e)^d mod N = x
      which is the same as
      x^(e*d) mod N = x

    - https://en.wikipedia.org/wiki/Trapdoor_function

*** generating e d pair

    - first find a pair of prime numbers p1 p2
      and use p1 * p2 as N
      [the N in x^(e*d) mod N = x]

    - the information about the factorization of N
      p1 * p2 = N
      is the information about the trapdoor

*** euler's totient function

    - phi (N) := the number of numbers,
      that less than or equal to N,
      and do not share any common factor with N.

    - phi (8) = 4, for [1 3 5 7]

      phi (p) = p - 1
      phi (7) = 6, for [1 2 3 4 5 6]

      phi (p^k) = p^(k-1) * (p - 1)
      phi (27) = phi (3^3) = 3^(3-1) * (3 - 1) = 18

      phi (a*b) = phi (a) * phi (b)
      ;; a b mul phi = a phi b phi mul

    - https://en.wikipedia.org/wiki/Euler's_totient_function

*** euler's theorem and RSA

    - factorization of N is a trapdoor for computing phi
      77 = 11 * 7
      phi (77) = phi (11) * phi (7) = 10 * 6 = 60

    - euler's theorem :
      x^(phi(N)) mod N = 1

    - RSA :
      x^(phi(N)*k + 1) mod N = x, for all k
      thus
      phi(N)*k + 1 = e * d

    - bob choose p1 * p2 = N
      and choose k e d, to let phi(N)*k + 1 = e * d
      bob keeps d private
      and makes e N public

    - to get e d N, to let x^(e*d) mod N = x
      and then use
      e N as public key
      d as private key

      we construct
      phi(N)*k + 1 = e * d
      p1 * p2 = N

    - x -
      how to choose k and e ?
      or should we choose e first and then k ?

*** example of RAS

    - p1 = 53
      p2 = 59
      N = 53*59 = 3127
      phi(N) = 52*58 = 3016
      e = 3
      k = 2
      d = (2*(3016) + 1) / 3 = 2011

    - suppose we have message :
      m = 89

    - encryption :
      c = m^e mod N = 1394

    - decryption :
      m = c^d mod N = 89

    - https://en.wikipedia.org/wiki/RSA_(cryptosystem)

* >< hashcash

*** links

    - https://en.wikipedia.org/wiki/Hashcash

    - https://en.wikipedia.org/wiki/Base64

    - https://en.wikipedia.org/wiki/Proof-of-work_system

*** interactive cost-functions

    #+begin_src cicada
    (+fun challenge
      : (-> server-t work-load-t -- challenge-t))

    (+fun mint
      : (-> challenge-t -- token-t))

    (+fun value
      : (-> token-t -- value-u))
    #+end_src

*** non-interactive cost-functions

    #+begin_src cicada
    (+fun mint
      : (-> server-t work-load-t -- token-t))

    (+fun value
      : (-> token-t -- value-u))
    #+end_src

*** the hashcash cost-functions

    - the service-name uniquely identifies the service

    - servers only accept tokens minted using their own service-name

    - hashcash is computed relative to a service-name,
      to prevent tokens minted for one server being used on another

    #+begin_src cicada

    #+end_src

* blockchain

*** simple imps

    https://hackernoon.com/learn-blockchains-by-building-one-117428612f46
    https://hackernoon.com/a-cryptocurrency-implementation-in-less-than-1500-lines-of-code-d3812bedb25c
    https://medium.com/crypto-currently/lets-make-the-tiniest-blockchain-bigger-ac360a328f4d
    https://medium.com/@lhartikk/a-blockchain-in-200-lines-of-code-963cc1cc0e54

* >< journey into information theory

*** links

    - https://www.khanacademy.org/computing/computer-science/informationtheory#info-theory
